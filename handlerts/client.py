import os

import aiogram.utils.exceptions
from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import keyboards_client
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import random
from typing import List


# –ó–Ω–∞—á–µ–Ω–∏—è: [–° –∫–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞(—Å—Ç—Ä–æ–∫–∏) –Ω–∞—á–∏–Ω–∞—Ç—å, –°–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤(inline –∫–Ω–æ–ø–æ–∫) –≤—ã–≤–æ–¥–∏—Ç—å]
DEFAULT_PAGES_PARAMS = [0, 5]
PHILOSOPHY_COURSE_PATH = 'resources/philosophy_course'
LITERATURE_COURSE_PATH = 'resources/literature'


async def open_file(name: str, directory_in_resources: str, sep: str) -> List:
    try:
        with open(f'resources/{directory_in_resources}/{name}', encoding='utf8') as opened_file:
            result = [x.strip() for x in opened_file.read().split(sep)]
            return result
    except OSError as e:
        print(e)


async def format_quotes_from_list(quotes_list: List[str]) -> List[str]:
    quotes = [x.replace(' (', "¬©").replace(")", "") for x in quotes_list]
    result = [quote for quote in quotes]
    return result



# literature_and_files = {'–û–±—â–µ—Å—Ç–≤–æ –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è': 'obchestvo_i_obsch_otnoshenia.txt',
#                         '–ú–∏—Ä–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': 'miroustroystvo.txt',
#                         'Cogito ergo sum': 'cogito ergo sum.txt',
#                         '–°–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ': 'samoopredelenie_i_samopoznanie.txt'}


@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    try:
        await bot.send_message(message.from_user.id,
                               '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –§–∏–ª–æ–Ω–µ–º–∞üëã. –ú–æ—ë –∏–º—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –æ—Ç –¥–≤—É—Ö —Å–ª–æ–≤ - —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –∏ —Å–∏–Ω–µ–º–∞(–∫–∏–Ω–æ).',
                               reply_markup=keyboards_client)
        await message.delete()
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É:\nt.me/PhilonemaBot')


@dp.message_handler(commands=["–¶–∏—Ç–∞—Ç—ã", "–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", '–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'])
async def give_category(message: types.Message):
    if message.text == '/–¶–∏—Ç–∞—Ç—ã':
        await give_quote(message)
    elif message.text == '/–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏':
        await give_course(message)
    elif message.text == '/–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞':
        await give_literature(message)
    else:
        await give_info(message)


@dp.message_handler(commands=["–¶–∏—Ç–∞—Ç—ã"])
async def give_quote(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text="–õ—é–±–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="quotes"),
                 types.InlineKeyboardButton(text="–¶–∏—Ç–∞—Ç–∞ –æ –∫–∏–Ω–æ", callback_data="quotesCinema"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é —Ü–∏—Ç–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ:", reply_markup=keyboard)


@dp.callback_query_handler(text=["quotes", 'quotesCinema'])
async def send_quotes(call: types.CallbackQuery):
    type_of_quote = call.data
    authors_and_quotes = await open_file(name=f'{type_of_quote}.txt', directory_in_resources='quotes', sep='\n')
    quotes = await format_quotes_from_list(authors_and_quotes)
    random_count = random.randint(0, len(quotes) - 1)
    await call.message.answer(quotes[random_count])


@dp.message_handler(commands=["–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏"])
async def give_course(message: types.Message):
    await give_course_pages(message, DEFAULT_PAGES_PARAMS, 'os.listdir:' + PHILOSOPHY_COURSE_PATH)


async def give_course_pages(call, page_params, attribute_and_path):
    keyboard = types.InlineKeyboardMarkup()
    attribute = attribute_and_path.split(':')[0]
    path = attribute_and_path.split(':')[1]
    # –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ —Å os.listdir –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∂–µ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á—Ç–µ–Ω–∏—è list(–∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫–∏)
    if attribute == 'os.listdir':
        selected_themes = os.listdir(path)[page_params[0]:page_params[1]]
    # c == course philo, l == literature
    elif attribute in ['c', 'l']:
        if attribute == 'c':
            package = 'philosophy_course'
        elif attribute == 'l':
            package = 'literature'
        theme = await open_file(path, package, '<new>')
        selected_themes = []
        urls = []
        for i in theme:
            temp = i.split('\n')
            selected_themes.append(temp[0])
            if attribute == 'l':
                urls.append(temp[1])
        selected_themes = selected_themes[page_params[0]:page_params[1]]
        if attribute == 'l':
            urls = urls[page_params[0]:page_params[1]]
        print('selected', selected_themes)
    else:
        print('incorrect attribute')
        return

    if len(selected_themes) < 1:
        await call.answer(text='–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç!', show_alert=True)
        return

    for theme_path in selected_themes:
        if attribute == 'os.listdir':
            keyboard.add(types.InlineKeyboardButton(text=os.path.splitext(theme_path)[0], callback_data=theme_path))
        if attribute == 'c':
            keyboard.add(types.InlineKeyboardButton(text=theme_path, callback_data=theme_path))
    if attribute == 'l':
        for i in range(len(urls)):
            keyboard.add(types.InlineKeyboardButton(text=selected_themes[i], url=urls[i]))

    page = int(page_params[0] / DEFAULT_PAGES_PARAMS[1])

    keyboard.add(
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'p:{page}:{attribute}:{path}'),
        types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥', callback_data=f'n:{page}:{attribute}:{path}'))
    print(f'p:{page}:{attribute}:{path}')
    print('—Ä–∞–∑–º–µ—Ä', utf8len(f'p:{page}:{attribute}:{path}'))

    if type(call) != types.CallbackQuery:
        # –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ call —ç—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π message
        await call.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)
    else:
        try:
            await call.message.edit_text(text=os.path.splitext(path)[0], reply_markup=keyboard)
        except aiogram.utils.exceptions.ButtonDataInvalid as e:
            print(e)


def utf8len(s):
    return len(s.encode('utf-8'))


def change_page_params(page):
    return [DEFAULT_PAGES_PARAMS[1] * page, DEFAULT_PAGES_PARAMS[1] * page + DEFAULT_PAGES_PARAMS[1]]


async def course_previous_next(call):
    pressed_button = call.data.split(':')[0]
    page = int(call.data.split(':')[1])
    # –Ω–∏–∂–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    path_directory = call.data.split(':')[2] + ':' + call.data.split(':')[3]
    if pressed_button == 'n':
        page += 1
        await give_course_pages(call, change_page_params(page), path_directory)
        return

    if pressed_button == 'p':
        if page > 0:
            page -= 1
            await give_course_pages(call, change_page_params(page), path_directory)
        else:
            await call.answer(text='–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç!', show_alert=True)
        return


def get_header(theme: str):
    header = theme.split('\n')[0]
    return header


@dp.message_handler(commands="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")
async def give_literature(message: types.Message):
    await give_course_pages(message, DEFAULT_PAGES_PARAMS, 'os.listdir:' + LITERATURE_COURSE_PATH)


@dp.message_handler(commands="–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def give_info(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üé¨–ö–∏–Ω–æ–∫–ª—É–± \"–§–∏–ª–æ—Å–æ—Ñ–∏—è –∫–∏–Ω–æ\"", callback_data="cinema_club"))
    keyboard.add(types.InlineKeyboardButton(text="üßë‚Äçüíªüë©‚Äçüíª–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞", callback_data="developers"))
    await message.answer("–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", reply_markup=keyboard)


@dp.callback_query_handler(text="cinema_club")
async def cinema_club(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å –≤ üé¨–ö–∏–Ω–æ–∫–ª—É–±", url="https://t.me/studactiv_znatie_samgtu/242"))
    await call.message.answer(
        "–ü—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –°—Ç—É–¥–∞–∫—Ç–∏–≤–∞ \"–ó–Ω–∞–Ω–∏–µ\" –°–∞–º–ì–¢–£, –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –ö–∏–Ω–æ–∫–ª—É–± \"–§–∏–ª–æ—Å–æ—Ñ–∏—è –∫–∏–Ω–æ\", –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –¥.—Ñ.–Ω. –í.–ë.–ú–∞–ª—ã—à–µ–≤–∞.",
        reply_markup=keyboard)


@dp.callback_query_handler(text="developers")
async def developers(call: types.CallbackQuery):
    await call.message.answer(
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –°–∞–º–ì–¢–£ 2-–ò–ê–ò–¢-109üòé\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –°—Ç—É–¥–∞–∫—Ç–∏–≤–∞ \"–ó–Ω–∞–Ω–∏–µ\", –ö–∏–Ω–æ–∫–ª—É–±–∞ \"–§–∏–ª–æ—Å–æ—Ñ–∏—è –∫–∏–Ω–æ\"\n–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\nüëâ–ë–∞—Ä—Ç–µ–Ω–µ–≤ –ê.–í\nüëâ–ü–∞—Å—é–≥–∞ –ê.–ê.\nüëâ–ï—Ä–º–æ–ª–∏–Ω –ö.–ü.\nüëâ–°—Ç—Ä–æ–∫–∏–Ω –ò.–ê\nüëâ–ú–∞–ª—ã—à–µ–≤ –ú.–ê.\nüëâ–ú—É—Ä—ã–≥–∏–Ω –î.–ê.\nüëâ–†—è–±–æ–≤–∞ –î.–ê\nüëâ–ê–≤–¥–æ—à–∏–Ω –ú.–ê")


@dp.callback_query_handler()
async def catch_all_callbacks(call: types.CallbackQuery):
    if call.data.split(':')[0] in ['p', 'n']:
        # print('catch', call.data)
        await course_previous_next(call)
        return

    if call.data in os.listdir(PHILOSOPHY_COURSE_PATH):
        await give_philo_topics(call)
        return

    if call.data in os.listdir(LITERATURE_COURSE_PATH):
        await give_lit_topics(call)
        return

    await give_text_and_picture(call)


async def give_philo_topics(call):
    print('def philo topic', call.data)
    theme_file = call.data
    attribute = 'c'
    # –Ω–∏–∂–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–µ–¥–æ—á–µ—Ç—ã
    await give_course_pages(call, DEFAULT_PAGES_PARAMS, f'{attribute}:{theme_file}')


async def give_lit_topics(call):
    print('def lit topic', call.data)
    theme_file = call.data
    attribute = 'l'
    # –Ω–∏–∂–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–µ–¥–æ—á–µ—Ç—ã
    await give_course_pages(call, DEFAULT_PAGES_PARAMS, f'{attribute}:{theme_file}')


async def give_text_and_picture(call):
    print('give text and picture')
    for theme_name in os.listdir(PHILOSOPHY_COURSE_PATH):
        theme = await open_file(theme_name, 'philosophy_course', '<new>')
        for topic in theme:
            if call.data == get_header(topic):
                try:
                    path = f'resources/pictures/{call.data.strip()}.png'
                    photo = open(path, 'rb')
                    await call.message.answer_photo(photo, caption=topic)
                except:
                    try:
                        print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π caption")
                        path = f'resources/pictures/{call.data.strip()}.png'
                        photo = open(path, 'rb')
                        await call.message.answer_photo(photo)
                        await call.message.answer(topic)
                    except:
                        print("–ù–µ –Ω–∞—à—ë–ª –∫–∞—Ä—Ç–∏–Ω–∫—É")
                        await call.message.answer(topic)


@dp.message_handler(commands=['–ó–∞—á–µ–º_—Ç—ã_–Ω—É–∂–µ–Ω?'])
async def why_need(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü–æ–∫–∞ —á—Ç–æ —è –∏ —Å–∞–º —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞—é, —ç—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Åü§î')


# admins = {828256665:'–ë–∞—Ä—Ç–µ–Ω–µ–≤ –ê–Ω–¥—Ä–µ–π', 1144869308:'–ê–≤–¥–æ—à–∏–Ω –ú–∞–∫—Å–∏–º',1048347854:'–í–∞—Å–∏–ª–∏—Å–∞'}
# @dp.message_handler()
# async def why_need(message: types.Message):
#     # —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
#     if message.from_user.id in list(admins.keys()):
#         await bot.send_message(message.from_user.id, '–¢—ã –∞–¥–º–∏–Ω')
#         return
#     # —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —é–∑–µ—Ä–æ–≤
#     await bot.send_message(message.from_user.id, '–¢—ã —Ö–æ–ª–æ–ø')


def register_handler_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(why_need, commands=['–ó–∞—á–µ–º_—Ç—ã_–Ω—É–∂–µ–Ω?'])
    dp.register_message_handler(give_category, commands=['–¶–∏—Ç–∞—Ç—ã', '–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'])
