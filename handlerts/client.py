import asyncio
import random
from typing import List
import re

from aiogram import types, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from create_bot import dp, bot
from keyboards import keyboards_client
from Cinema.CinemaCard import CinemaCard


async def open_file(name: str, directory_in_resources: str, sep: str) -> List:
    try:
        with open(f'resources/{directory_in_resources}/{name}', encoding='utf8') as opened_file:
            result = [x.strip() for x in opened_file.read().split(sep)]
            return result
    except OSError as e:
        print(e)


async def format_quotes_from_list(quotes_list: List[str]) -> List[str]:
    quotes = [x.replace(' (', "¬©").replace(")", "") for x in quotes_list]
    result = [quote for quote in quotes]
    return result

themes_and_files = {'–≠–ø–æ—Ö–∞ –ú–∞—Ä–∫—Å–∏–∑–º–∞': 'Epokha_Marxizma_i_vytekayuschikh_iz_nego_techeniy.txt',
                    '–î—Ä–µ–≤–Ω—è—è –ò–Ω–¥–∏—è –∏ –ö–∏—Ç–∞–π': 'Drevnyaya_India_i_Kitay.txt',
                    '–ì—É–º–∞–Ω–∏–∑–º, –ú–æ–ª–æ—Ç –í–µ–¥—å–º, –≠—Ä–∞–∑–º': 'Gumanizm_Molot_Vedm_Erazm.txt',
                    '–†—É—Å—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è': 'Russkaya_filosofia.txt',
                    '–ü–æ–∑–∏—Ç–∏–≤–∏–∑–º': 'Pozitsivizm.txt'}

literature_and_files = {'–û–±—â–µ—Å—Ç–≤–æ –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è': 'obchestvo_i_obsch_otnoshenia.txt',
                        '–ú–∏—Ä–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': 'miroustroystvo.txt',
                        'Cogito ergo sum': 'cogito ergo sum.txt',
                        '–°–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ': 'samoopredelenie_i_samopoznanie.txt'}
admins = {1144869308: '–ê–≤–¥–æ—à–∏–Ω –ú–∞–∫—Å–∏–º'}
global new_film

@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    try:
        await bot.send_message(message.from_user.id,
                               '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –§–∏–ª–æ–Ω–µ–º–∞üëã. –ú–æ—ë –∏–º—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –æ—Ç –¥–≤—É—Ö —Å–ª–æ–≤ - —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –∏ —Å–∏–Ω–µ–º–∞(–∫–∏–Ω–æ).',
                               reply_markup=keyboards_client)
        await message.delete()
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É:\nt.me/PhilonemaBot')


@dp.message_handler(commands=['–ö–∏–Ω–æ', "–¶–∏—Ç–∞—Ç—ã", "–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", '–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'])
async def give_category(message: types.Message):
    if message.text == '/–ö–∏–Ω–æ':
        await give_cinema(message)
    elif message.text == '/–¶–∏—Ç–∞—Ç—ã':
        await give_quote(message)
    elif message.text == '/–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏':
        await give_course(message)
    elif message.text == '/–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞':
        await give_literature(message)
    else:
        await give_info(message)


@dp.message_handler(commands=['–ö–∏–Ω–æ'])
async def give_cinema(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    print(message.from_user.id)
    directors = set(CinemaCard.cinema_cards_base['–†–µ–∂–∏—Å—Å–µ—Ä'])
    if message.from_user.id in list(admins.keys()):
        keyboard.add(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∏–ª—å–º–∞', callback_data='add_card'))
    for i in directors:
        keyboard.add(types.InlineKeyboardButton(text=i, callback_data=f'{i}|{message.from_user.id}'))
    _ = "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é –Ω–∞—à–∏–º –∫–∏–Ω–æ–∫–ª—É–±–æ–º"
    __ = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞, —Ñ–∏–ª—å–º—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç'
    await message.answer(text=f'{_}.\n{__}:', reply_markup=keyboard)

global temp_film_info
global temp_delete_message
fields = ('–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ä–µ–∂–∏—Å—Å–µ—Ä–∞', '—Ä–µ–ø–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏', '—Å—Å—ã–ª–∫—É')


@dp.callback_query_handler(text='add_card')
async def input_name(call: types.CallbackQuery):
    await Form.card.set()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_input"))
    global temp_film_info
    temp_film_info = []
    await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:", reply_markup=keyboard)


class Form(StatesGroup):
    card = State()
    director = State()
    timecodes = State()
    link = State()
    save = State()


@dp.message_handler(state=Form.card)
async def input_author(message: types.Message, state: FSMContext):
    await state.finish()
    global temp_film_info
    temp_film_info.append(message.text)
    await message.delete()
    await Form.director.set()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_input"))
    global temp_delete_message
    temp_delete_message = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã:", reply_markup=keyboard)


@dp.message_handler(state=Form.director)
async def input_timecodes(message: types.Message, state: FSMContext):
    await state.finish()
    global temp_film_info
    temp_film_info.append(message.text)
    await message.delete()
    await Form.timecodes.set()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_input"))
    global temp_delete_message
    temp_delete_message = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ä–µ–ø–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏:", reply_markup=keyboard)


@dp.message_handler(state=Form.timecodes)
async def input_link(message: types.Message, state: FSMContext):
    await state.finish()
    global temp_film_info
    temp_film_info.append(message.text)
    await message.delete()
    await Form.link.set()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_input"))
    global temp_delete_message
    temp_delete_message = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:", reply_markup=keyboard)


@dp.message_handler(state=Form.link)
async def accept_quote_and_author(message: types.Message, state: FSMContext):
    await state.finish()
    global temp_delete_message
    await temp_delete_message.delete()
    global temp_film_info
    temp_film_info.append(message.text)
    film = CinemaCard.add_card_to_csv(temp_film_info[0], temp_film_info[1], temp_film_info[2], temp_film_info[3])
    text = f'{film.name}\n{film.director}\n{film.timecodes}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞: {film.link}'
    await message.answer(text)
    await message.delete()


@dp.callback_query_handler(lambda call: True if re.fullmatch(r'[^|]*\|[^|]*', call.data) else False)
async def give_films(call: types.CallbackQuery):
    director, user_id = call.data.split('|')
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    films = set(CinemaCard.cinema_cards_base['–ù–∞–∑–≤–∞–Ω–∏–µ'].loc[CinemaCard.cinema_cards_base['–†–µ–∂–∏—Å—Å–µ—Ä'] == director])
    for i in films:
        keyboard.add(types.InlineKeyboardButton(text=i, callback_data=f'{i}|{call.data}'))
    await call.message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ {director}', reply_markup=keyboard)


@dp.callback_query_handler(lambda call: True if re.fullmatch(r'[^|]*\|[^|]*\|[^|]*', call.data) else False)
async def give_film_card(call: types.CallbackQuery):
    film_name, director, user_id = call.data.split('|')
    user_id = int(user_id)
    film = await asyncio.create_task(CinemaCard.get_card_from_csv(film_name, director))
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    if user_id in list(admins.keys()):
        keyboard.add(types.InlineKeyboardButton(text='–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏–∏',
                                                callback_data=f'moderate|{film_name}|{director}|{user_id}'))
    keyboard.add(types.InlineKeyboardButton(text='–û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º', callback_data=f'rate|{film_name}|{director}'),
                 # types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é',
                  #                          callback_data=f'leave review|{film_name}|{director}|{user_id}'),
                 types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏–∏',
                                            callback_data=f'show reviews|{film_name}|{director}|{user_id}'))
    text = f'{film.name}\n{film.director}\n{film.timecodes}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞: {film.link}'
    rating = f'–û—Ü–µ–Ω–∫–∏:\n'
    for i in film.rating.keys():
        rating = f'{rating}{i}: {film.rating[i]}\n'
    await call.message.answer(text=f'{text}\n{rating}', reply_markup=keyboard)


@dp.callback_query_handler(lambda call: True if re.fullmatch(r'show reviews\|[^|]*\|[^|]*\|[^|]*', call.data) else False)
async def show_reviews(call: types.CallbackQuery):
    *_, film_name, director, user_id = call.data.split('|')
    film = await asyncio.create_task(CinemaCard.get_card_from_csv(film_name, director))
    try:
        id_, text = film.get_next_applied_review()
    except StopIteration:
        end_keyboard = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                        callback_data=f'{film_name}|{director}|{user_id}'))
        await call.message.answer(text=f'–ë–æ–ª—å—à–µ —Ä–µ—Ü–µ–Ω–∑–∏–π –Ω–µ—Ç.', reply_markup=end_keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é',
                                                callback_data=f'show reviews|{film_name}|{director}'),
                     types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                callback_data=f'{film_name}|{director}'))
        await call.message.answer(text=f'–†–µ—Ü–µ–Ω–∑–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è{id_}:\n{text}', reply_markup=keyboard)


@dp.callback_query_handler(lambda call: True if re.fullmatch(r'rate\|[^|]*\|[^|]*', call.data) else False)
async def rate_beginning(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f'{call.data}|'))
    text = '–í–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10'
    await call.message.answer(text=text, reply_markup=keyboard)


@dp.callback_query_handler(lambda call: True if re.fullmatch(r'rate\|[^|]*\|[^|]*\|[^|]*', call.data) else False)
async def rate_processing(call: types.CallbackQuery):
    categories = ('–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞',
                  '–û—Å—Ç—Ä–æ—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã',
                  '–ù–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞',
                  '–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ',
                  '–ù–∞—Å–∫–æ–ª—å–∫–æ –±–µ—Ä–µ—Ç –∑–∞ –¥—É—à—É',
                  '–†–∞—Å–∫—Ä—ã—Ç–∏–µ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞',
                  '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–ª—É–±–∏–Ω–∞',
                  '–û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ')
    _, film_name, director, rates = call.data.split('|')
    length = len(rates)
    if length == 8:
        text = '–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:\n'
        for i in categories:
            text = f'{text}{i}: {rates[categories.index(i)]}\n'
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f'{call.data}|apply'),
                     types.InlineKeyboardButton(text='–í—ã—Å—Ç–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ',
                                                callback_data=f'rate|{film_name}|{director}|'))
        await call.message.answer(text=text, reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        for i in range(10):
            keyboard.add(types.InlineKeyboardButton(text=f'{i+1}', callback_data=f'{call.data}{i}'))
        await call.message.answer(text=f'{categories[length]}', reply_markup=keyboard)


@dp.callback_query_handler(lambda call: True if re.fullmatch(r'rate\|[^|]*\|[^|]*\|[^|]*\|apply', call.data) else False)
async def rate_apply(call: types.CallbackQuery):
    _, film_name, director, rates, __ = call.data.split('|')
    int_rates = [int(x)+1 for x in rates]
    film = await asyncio.create_task(CinemaCard.get_card_from_csv(film_name, director))
    film.add_rating(int_rates)
    await call.message.answer(text='–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')


@dp.callback_query_handler(lambda call: True if re.fullmatch(r'moderate\|[^|]*\|[^|]*\|[^|]*', call.data) else False)
async def moderate_reviews(call: types.CallbackQuery):
    *_, film_name, director, user_id = call.data.split('|')
    film = await asyncio.create_task(CinemaCard.get_card_from_csv(film_name, director))
    try:
        id_, text = film.get_next_unseen_review()
    except StopIteration:
        end_keyboard = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                        callback_data=f'{film_name}|{director}|{user_id}'))
        await call.message.answer(text=f'–ù–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π –Ω–µ—Ç.', reply_markup=end_keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton(text='–û–¥–æ–±—Ä–∏—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é',
                                                callback_data=f'apply|{film_name}|{director}|{user_id}|{id_}'),
                     types.InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é',
                                                callback_data=f'decline|{film_name}|{director}|{user_id}|{id_}'),
                     types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                                callback_data=f'{film_name}|{director}|{user_id}'))
        await call.message.answer(text=f'–†–µ—Ü–µ–Ω–∑–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id_}:\n{text}', reply_markup=keyboard)


@dp.callback_query_handler(lambda call: True if re.fullmatch(r'apply\|[^|]*\|[^|]*\|[^|]*\|[^|]*|decline\|[^|]*\|['
                                                             r'^|]*\|[^|]*\|[^|]*', call.data) else False)
async def apply_or_decline_review(call: types.CallbackQuery):
    _, film_name, director, user_id, id_ = call.data.split('|')
    film = await asyncio.create_task(CinemaCard.get_card_from_csv(film_name, director))
    if _ == 'apply':
        film.apply_review(id_)
    else:
        film.decline_review(id_)
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                                            callback_data=f'moderate|{film_name}|{director}|{user_id}'))
    await call.message.answer(text=f'–£—Å–ø–µ—à–Ω–æ!', reply_markup=keyboard)


@dp.message_handler(commands=["–¶–∏—Ç–∞—Ç—ã"])
async def give_quote(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text="–õ—é–±–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="quotes"),
                 types.InlineKeyboardButton(text="–¶–∏—Ç–∞—Ç–∞ –æ –∫–∏–Ω–æ", callback_data="quotesCinema"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é —Ü–∏—Ç–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ:", reply_markup=keyboard)


@dp.callback_query_handler(text=["quotes", 'quotesCinema'])
async def send_quotes(call: types.CallbackQuery):
    type_of_quote = call.data
    authors_and_quotes = await open_file(name=f'{type_of_quote}.txt', directory_in_resources='quotes', sep='\n')
    quotes = await format_quotes_from_list(authors_and_quotes)
    random_count = random.randint(0, len(quotes)-1)
    await call.message.answer(quotes[random_count])


@dp.message_handler(commands="–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏")
async def give_course(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–≠–ø–æ—Ö–∞ –ú–∞—Ä–∫—Å–∏–∑–º–∞", callback_data="–≠–ø–æ—Ö–∞ –ú–∞—Ä–∫—Å–∏–∑–º–∞"))
    keyboard.add(types.InlineKeyboardButton(text="–î—Ä–µ–≤–Ω—è—è –ò–Ω–¥–∏—è –∏ –ö–∏—Ç–∞–π", callback_data="–î—Ä–µ–≤–Ω—è—è –ò–Ω–¥–∏—è –∏ –ö–∏—Ç–∞–π"))
    keyboard.add(types.InlineKeyboardButton(text="–ì—É–º–∞–Ω–∏–∑–º, –ú–æ–ª–æ—Ç –í–µ–¥—å–º, –≠—Ä–∞–∑–º",
                                            callback_data="–ì—É–º–∞–Ω–∏–∑–º, –ú–æ–ª–æ—Ç –í–µ–¥—å–º, –≠—Ä–∞–∑–º"))
    keyboard.add(types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", callback_data="–†—É—Å—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è"))
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–∑–∏—Ç–∏–≤–∏–∑–º", callback_data="–ü–æ–∑–∏—Ç–∏–≤–∏–∑–º"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)


def get_header(theme: str):
    header = theme.split('\n')[0]
    return header


@dp.callback_query_handler(text=list(themes_and_files.keys()))
async def topic(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    theme_file = themes_and_files[call.data]
    theme = await open_file(theme_file, 'philosophy_course', '<new>')
    for i in theme:
        temp = i.split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer(f"{call.data}:", reply_markup=keyboard)


@dp.message_handler(commands="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")
async def give_literature(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û–±—â–µ—Å—Ç–≤–æ –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
                                            callback_data="–û–±—â–µ—Å—Ç–≤–æ –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"))
    keyboard.add(types.InlineKeyboardButton(text="–ú–∏—Ä–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="–ú–∏—Ä–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"))
    keyboard.add(types.InlineKeyboardButton(text="Cogito ergo sum", callback_data="Cogito ergo sum"))
    keyboard.add(types.InlineKeyboardButton(text="–°–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ",
                                            callback_data="–°–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)


@dp.callback_query_handler(text=list(literature_and_files.keys()))
async def literature(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    theme_file = literature_and_files[call.data]
    literature = await open_file(theme_file, 'literature', '<new>')
    for i in literature:
        temp = i.split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], url=temp[1]))
    await call.message.answer(f"{call.data}:", reply_markup=keyboard)


@dp.message_handler(commands="–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def give_info(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üé¨–ö–∏–Ω–æ–∫–ª—É–±\"–§–∏–ª–æ—Å–æ—Ñ–∏—è –∫–∏–Ω–æ\"", callback_data="cinema_club"))
    keyboard.add(types.InlineKeyboardButton(text="üßë‚Äçüíªüë©‚Äçüíª–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞", callback_data="developers"))
    await message.answer("–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", reply_markup=keyboard)


@dp.callback_query_handler(text="cinema_club")
async def cinema_club(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å –≤ üé¨–ö–∏–Ω–æ–∫–ª—É–±", url="https://t.me/studactiv_znatie_samgtu/242"))
    await call.message.answer("–ü—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –°—Ç—É–¥–∞–∫—Ç–∏–≤–∞ \"–ó–Ω–∞–Ω–∏–µ\" –°–∞–º–ì–¢–£, –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –ö–∏–Ω–æ–∫–ª—É–± \"–§–∏–ª–æ—Å–æ—Ñ–∏—è –∫–∏–Ω–æ\", –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –¥.—Ñ.–Ω. –í.–ë.–ú–∞–ª—ã—à–µ–≤–∞.", reply_markup=keyboard)


@dp.callback_query_handler(text="developers")
async def developers(call: types.CallbackQuery):
    await call.message.answer("–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –°–∞–º–ì–¢–£ 2-–ò–ê–ò–¢-109üòé\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –°—Ç—É–¥–∞–∫—Ç–∏–≤–∞ \"–ó–Ω–∞–Ω–∏–µ\", –ö–∏–Ω–æ–∫–ª—É–±–∞ \"–§–∏–ª–æ—Å–æ—Ñ–∏—è –∫–∏–Ω–æ\"\n–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\nüëâ–ë–∞—Ä—Ç–µ–Ω–µ–≤ –ê.–í\nüëâ–ü–∞—Å—é–≥–∞ –ê.–ê.\nüëâ–ï—Ä–º–æ–ª–∏–Ω –ö.–ü.\nüëâ–°—Ç—Ä–æ–∫–∏–Ω –ò.–ê\nüëâ–ú–∞–ª—ã—à–µ–≤ –ú.–ê.\nüëâ–ú—É—Ä—ã–≥–∏–Ω –î.–ê.\nüëâ–†—è–±–æ–≤–∞ –î.–ê\nüëâ–ê–≤–¥–æ—à–∏–Ω –ú.–ê")


# path = 'resources/' + call.data.strip() + '.png'
# photo = open(path, 'rb')
# await call.message.answer_photo(photo, caption=theme1[i])
@dp.callback_query_handler()
async def give_text_and_pictures(call: types.CallbackQuery):
    for theme_name in themes_and_files.keys():
        theme = await open_file(themes_and_files[theme_name], 'philosophy_course', '<new>')
        for topic in theme:
            if call.data == get_header(topic):
                try:
                    path = f'resources/pictures/{call.data.strip()}.png'
                    photo = open(path, 'rb')
                    await call.message.answer_photo(photo, caption=topic)
                except:
                    try:
                        print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π caption")
                        path = f'resources/pictures/{call.data.strip()}.png'
                        photo = open(path, 'rb')
                        await call.message.answer_photo(photo)
                        await call.message.answer(topic)
                    except:
                        print("–ù–µ –Ω–∞—à—ë–ª –∫–∞—Ä—Ç–∏–Ω–∫—É")
                        await call.message.answer(topic)


@dp.message_handler(commands=['–ó–∞—á–µ–º_—Ç—ã_–Ω—É–∂–µ–Ω?'])
async def why_need(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü–æ–∫–∞ —á—Ç–æ —è –∏ —Å–∞–º —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞—é, —ç—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Åü§î')


def register_handler_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(why_need, commands=['–ó–∞—á–µ–º_—Ç—ã_–Ω—É–∂–µ–Ω?'])
    dp.register_message_handler(give_category, commands=['–¶–∏—Ç–∞—Ç—ã', '–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                                                         '–ö–∏–Ω–æ'])
