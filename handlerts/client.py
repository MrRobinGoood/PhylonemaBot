from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import keyboards_client
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import random
from typing import List


async def open_file(name: str, directory_in_resourses: str, sep: str) -> List:
    try:
        with open(f'resourses/{directory_in_resourses}/{name}') as opened_file:
            result = [x.strip() for x in opened_file.read().split(sep)]
            return result
    except OSError as e:
        print(e)


async def format_quotes_from_list(quotes_list: List[str]) -> List[str]:
    quotes= quotes_list[::2]
    authors = [x.replace(' (', "¬©").replace(")", "") for x in quotes_list[1::2]]
    quotes = zip(quotes, authors)
    result = [f'{quote[0]} {quote[1]}' for quote in quotes]
    return result

file3 = open("resources/philosophy_course/Epokha_Marxizma_i_vytekayuschikh_iz_nego_techeniy.txt", mode="r",
             encoding="utf8")
theme1 = file3.read().split('<new>')
for i in range(len(theme1)):
    theme1[i] = theme1[i].strip()
file3.close()

file4 = open("resources/philosophy_course/Drevnyaya_India_i_Kitay.txt", mode="r", encoding="utf8")
theme2 = file4.read().split('<new>')
for i in range(len(theme2)):
    theme2[i] = theme2[i].strip()
file4.close()

file5 = open("resources/philosophy_course/Gumanizm_Molot_Vedm_Erazm.txt", mode="r", encoding="utf8")
theme3 = file5.read().split('<new>')
for i in range(len(theme3)):
    theme3[i] = theme3[i].strip()
file5.close()

file6 = open("resources/philosophy_course/Russkaya_filosofia.txt", mode="r", encoding="utf8")
theme4 = file6.read().split('<new>')
for i in range(len(theme4)):
    theme4[i] = theme4[i].strip()
file6.close()

file7 = open("resources/philosophy_course/Pozitsivizm.txt", mode="r", encoding="utf8")
theme5 = file7.read().split('<new>')
for i in range(len(theme5)):
    theme5[i] = theme5[i].strip()
file7.close()

file = open("resources/literature/obchestvo_i_obsch_otnoshenia.txt", mode="r", encoding="utf8")
lit1 = file.read().split('<new>')
for i in range(len(lit1)):
    lit1[i] = lit1[i].strip()
file.close()

file = open("resources/literature/miroustroystvo.txt", mode="r", encoding="utf8")
lit2 = file.read().split('<new>')
for i in range(len(lit2)):
    lit2[i] = lit2[i].strip()
file.close()

file = open("resources/literature/cogito ergo sum.txt", mode="r", encoding="utf8")
lit3 = file.read().split('<new>')
for i in range(len(lit3)):
    lit3[i] = lit3[i].strip()
file.close()
file = open("resources/literature/samoopredelenie_i_samopoznanie.txt", mode="r", encoding="utf8")
lit4 = file.read().split('<new>')
for i in range(len(lit4)):
    lit4[i] = lit4[i].strip()
file.close()


@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    try:
        await bot.send_message(message.from_user.id,
                               '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –§–∏–ª–æ–Ω–µ–º–∞üëã. –ú–æ—ë –∏–º—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –æ—Ç –¥–≤—É—Ö —Å–ª–æ–≤ - —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –∏ —Å–∏–Ω–µ–º–∞(–∫–∏–Ω–æ).',
                               reply_markup=keyboards_client)
        await message.delete()
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É:\nt.me/PhilonemaBot')


@dp.message_handler(commands="–¶–∏—Ç–∞—Ç—ã")
async def give_quotes(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–õ—é–±–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="quotes")).add(
        types.InlineKeyboardButton(text="–¶–∏—Ç–∞—Ç–∞ –æ –∫–∏–Ω–æ", callback_data="cinema_quotes"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é —Ü–∏—Ç–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ:", reply_markup=keyboard)


@dp.callback_query_handler(text="quotes")
async def send_quotes(call: types.CallbackQuery):
    authors_and_quotes = await open_file(name='quotes', directory_in_resourses='quotes', sep='\n')
    quotes = await format_quotes_from_list(authors_and_quotes)
    random_count = random.randint(0, len(quotes))
    await call.message.answer(quotes[random_count])


#TODO: –≤—ã—è—Å–Ω–∏—Ç—å, –∫–∞–∫ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ—Å—Ç–∏ send_quotes –∏ send_cinema_quotes
@dp.callback_query_handler(text="cinema_quotes")
async def send_cinema_quotes(call: types.CallbackQuery):
    authors_and_quotes = await open_file(name='quotesCinema', directory_in_resourses='quotes', sep='\n')
    quotes = await format_quotes_from_list(authors_and_quotes)
    random_count = random.randint(0, len(quotes))
    await call.message.answer(quotes[random_count])


@dp.message_handler(commands="–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏")
async def give_quotes(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–≠–ø–æ—Ö–∞ –ú–∞—Ä–∫—Å–∏–∑–º–∞", callback_data="topic1"))
    keyboard.add(types.InlineKeyboardButton(text="–î—Ä–µ–≤–Ω—è—è –ò–Ω–¥–∏—è –∏ –ö–∏—Ç–∞–π", callback_data="topic2"))
    keyboard.add(types.InlineKeyboardButton(text="–ì—É–º–∞–Ω–∏–∑–º, –ú–æ–ª–æ—Ç –í–µ–¥—å–º, –≠—Ä–∞–∑–º", callback_data="topic3"))
    keyboard.add(types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", callback_data="topic4"))
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–∑–∏—Ü–∏–≤–∏–∑–º", callback_data="topic5"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)


def get_headers(theme):
    headers = []
    for i in range(len(theme)):
        temp = theme[i].split('\n')
        headers.append(temp[0])
    return headers


@dp.callback_query_handler(text="topic1")
async def topic1(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(theme1)):
        temp = theme1[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer("–≠–ø–æ—Ö–∞ –ú–∞—Ä–∫—Å–∏–∑–º–∞ –∏ –≤—ã—Ç–µ–∫–∞—é—â–∏—Ö –∏–∑ –Ω–µ–≥–æ —Ç–µ—á–µ–Ω–∏–π:", reply_markup=keyboard)


@dp.callback_query_handler(text="topic2")
async def topic2(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(theme2)):
        temp = theme2[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer("–î—Ä–µ–≤–Ω—è—è –ò–Ω–¥–∏—è –∏ –ö–∏—Ç–∞–π:", reply_markup=keyboard)


@dp.callback_query_handler(text="topic3")
async def topic3(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(theme3)):
        temp = theme3[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer("–ì—É–º–∞–Ω–∏–∑–º, –ú–æ–ª–æ—Ç –í–µ–¥—å–º, –≠—Ä–∞–∑–º:", reply_markup=keyboard)


@dp.callback_query_handler(text="topic4")
async def topic4(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(theme4)):
        temp = theme4[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer("–†—É—Å—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è:", reply_markup=keyboard)


@dp.callback_query_handler(text="topic5")
async def topic5(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(theme5)):
        temp = theme5[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer("–ü–æ–∑–∏—Ü–∏–≤–∏–∑–º:", reply_markup=keyboard)


@dp.message_handler(commands="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")
async def give_quotes(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û–±—â–µ—Å—Ç–≤–æ –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="litrature1"))
    keyboard.add(types.InlineKeyboardButton(text="–ú–∏—Ä–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="litrature2"))
    keyboard.add(types.InlineKeyboardButton(text="Cogito ergo sum", callback_data="litrature3"))
    keyboard.add(types.InlineKeyboardButton(text="–°–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ", callback_data="litrature4"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)


@dp.callback_query_handler(text="litrature1")
async def literature1(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(lit1)):
        temp = lit1[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], url=temp[1]))
    await call.message.answer("–û–±—â–µ—Å—Ç–≤–æ –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query_handler(text="litrature2")
async def literature1(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(lit2)):
        temp = lit2[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], url=temp[1]))
    await call.message.answer("–ú–∏—Ä–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=keyboard)


@dp.callback_query_handler(text="litrature3")
async def literature1(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(lit3)):
        temp = lit3[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], url=temp[1]))
    await call.message.answer("Cogito ergo sum:", reply_markup=keyboard)


@dp.callback_query_handler(text="litrature4")
async def literature1(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(lit4)):
        temp = lit4[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], url=temp[1]))
    await call.message.answer("–°–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ:", reply_markup=keyboard)


@dp.message_handler(commands="–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def give_quotes(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üé¨–ö–∏–Ω–æ–∫–ª—É–±\"–§–∏–ª–æ—Å–æ—Ñ–∏—è –∫–∏–Ω–æ\"", callback_data="cinema_club"))
    keyboard.add(types.InlineKeyboardButton(text="üßë‚Äçüíªüë©‚Äçüíª–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞", callback_data="developers"))
    await message.answer("–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", reply_markup=keyboard)

@dp.callback_query_handler(text="cinema_club")
async def cinema_club(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å –≤ üé¨–ö–∏–Ω–æ–∫–ª—É–±", url="https://t.me/studactiv_znatie_samgtu/242"))
    await call.message.answer("–ü—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –°—Ç—É–¥–∞–∫—Ç–∏–≤–∞ \"–ó–Ω–∞–Ω–∏–µ\" –°–∞–º–ì–¢–£, –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –ö–∏–Ω–æ–∫–ª—É–± \"–§–∏–ª–æ—Å–æ—Ñ–∏—è –∫–∏–Ω–æ\", –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –¥.—Ñ.–Ω. –í.–ë.–ú–∞–ª—ã—à–µ–≤–∞.", reply_markup=keyboard)

@dp.callback_query_handler(text="developers")
async def developers(call: types.CallbackQuery):
    await call.message.answer("–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –°–∞–º–ì–¢–£ 2-–ò–ê–ò–¢-109üòé\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –°—Ç—É–¥–∞–∫—Ç–∏–≤–∞ \"–ó–Ω–∞–Ω–∏–µ\", –ö–∏–Ω–æ–∫–ª—É–±–∞ \"–§–∏–ª–æ—Å–æ—Ñ–∏—è –∫–∏–Ω–æ\"\n–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\nüëâ–ë–∞—Ä—Ç–µ–Ω–µ–≤ –ê.–í\nüëâ–ü–∞—Å—é–≥–∞ –ê.–ê.\nüëâ–ï—Ä–º–æ–ª–∏–Ω –ö.–ü.\nüëâ–°—Ç—Ä–æ–∫–∏–Ω –ò.–ê\nüëâ–ú–∞–ª—ã—à–µ–≤ –ú.–ê.\nüëâ–ú—É—Ä—ã–≥–∏–Ω –î.–ê.\nüëâ–†—è–±–æ–≤–∞ –î.–ê\nüëâ–ê–≤–¥–æ—à–∏–Ω –ú.–ê")


# path = 'resources/' + call.data.strip() + '.png'
# photo = open(path, 'rb')
# await call.message.answer_photo(photo, caption=theme1[i])
@dp.callback_query_handler()
async def lasten(call: types.CallbackQuery):
    for i in range(len(theme1)):
        if call.data == get_headers(theme1)[i]:
            try:
                path = 'resources/pictures/' + call.data.strip() + '.png'
                photo = open(path, 'rb')
                await call.message.answer_photo(photo, caption=theme1[i])
            except:
                try:
                    print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π caption")
                    path = 'resources/pictures/' + call.data.strip() + '.png'
                    photo = open(path, 'rb')
                    await call.message.answer_photo(photo)
                    await call.message.answer(theme1[i])
                except:
                    print("–ù–µ –Ω–∞—à—ë–ª –∫–∞—Ä—Ç–∏–Ω–∫—É")
                    await call.message.answer(theme1[i])

    for i in range(len(theme2)):
        if call.data == get_headers(theme2)[i]:
            try:
                path = 'resources/pictures/' + call.data.strip() + '.png'
                photo = open(path, 'rb')
                await call.message.answer_photo(photo, caption=theme2[i])
            except:
                try:
                    print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π caption")
                    path = 'resources/pictures/' + call.data.strip() + '.png'
                    photo = open(path, 'rb')
                    await call.message.answer_photo(photo)
                    await call.message.answer(theme2[i])
                except:
                    print("–ù–µ –Ω–∞—à—ë–ª –∫–∞—Ä—Ç–∏–Ω–∫—É")
                    await call.message.answer(theme2[i])

    for i in range(len(theme3)):
        if call.data == get_headers(theme3)[i]:
            try:
                path = 'resources/pictures/' + call.data.strip() + '.png'
                photo = open(path, 'rb')
                await call.message.answer_photo(photo, caption=theme3[i])
            except:
                try:
                    print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π caption")
                    path = 'resources/pictures/' + call.data.strip() + '.png'
                    photo = open(path, 'rb')
                    await call.message.answer_photo(photo)
                    await call.message.answer(theme3[i])
                except:
                    print("–ù–µ –Ω–∞—à—ë–ª –∫–∞—Ä—Ç–∏–Ω–∫—É")
                    await call.message.answer(theme3[i])

    for i in range(len(theme4)):
        if call.data == get_headers(theme4)[i]:
            try:
                path = 'resources/pictures/' + call.data.strip() + '.png'
                photo = open(path, 'rb')
                await call.message.answer_photo(photo, caption=theme4[i])
            except:
                try:
                    print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π caption")
                    path = 'resources/pictures/' + call.data.strip() + '.png'
                    photo = open(path, 'rb')
                    await call.message.answer_photo(photo)
                    await call.message.answer(theme4[i])
                except:
                    print("–ù–µ –Ω–∞—à—ë–ª –∫–∞—Ä—Ç–∏–Ω–∫—É")
                    await call.message.answer(theme4[i])

    for i in range(len(theme5)):
        if call.data == get_headers(theme5)[i]:
            try:
                path = 'resources/pictures/' + call.data.strip() + '.png'
                photo = open(path, 'rb')
                await call.message.answer_photo(photo, caption=theme5[i])
            except:
                try:
                    # print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π caption")
                    path = 'resources/pictures/' + call.data.strip() + '.png'
                    photo = open(path, 'rb')
                    await call.message.answer_photo(photo)
                    await call.message.answer(theme5[i])
                except:
                    # print("–ù–µ –Ω–∞—à—ë–ª –∫–∞—Ä—Ç–∏–Ω–∫—É")
                    await call.message.answer(theme5[i])


@dp.message_handler(commands=['–ó–∞—á–µ–º_—Ç—ã_–Ω—É–∂–µ–Ω?'])
async def why_need(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü–æ–∫–∞ —á—Ç–æ —è –∏ —Å–∞–º —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞—é, —ç—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Åü§î')


def register_handler_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(why_need, commands=['–ó–∞—á–µ–º_—Ç—ã_–Ω—É–∂–µ–Ω?'])
    dp.register_message_handler(give_quotes, commands=['–¶–∏—Ç–∞—Ç—ã'])
    dp.register_message_handler(give_quotes, commands=['–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏'])
    dp.register_message_handler(give_quotes, commands=['–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'])
    dp.register_message_handler(give_quotes, commands=['–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'])
