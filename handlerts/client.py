from aiogram import types, Dispatcher
import random
from create_bot import dp, bot
from keyboards import keyboards_client
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# 1-–π –≤–∞—Ä–∏–∞–Ω—Ç
urlkb = InlineKeyboardMarkup(row_width=1)
urlButton = InlineKeyboardButton(text='–î—Ä–µ–≤–Ω–∏–π –ö–∏—Ç–∞–π',
                                 url='https://docs.google.com/document/d/1fL2rhhblCS6OqZdSYf_omd2ER4NGqpOxSC34YrixMhc/edit')
urlButton2 = InlineKeyboardButton(text='–ù–æ–≤—ã–π –ö–∏—Ç–∞–π',
                                  url='https://docs.google.com/document/d/1fL2rhhblCS6OqZdSYf_omd2ER4NGqpOxSC34YrixMhc/edit')
urlkb.add(urlButton, urlButton2)

file = open("resources/quotes.txt", mode="r", encoding="utf8")
res = file.read().split('\n')
file.close()
quotes = res[::2]
authors = res[1::2]

file2 = open("resources/quotesCinema.txt", mode="r", encoding="utf8")
res2 = file2.read().split('\n')
for i in range(len(res2)):
    res2[i] = res2[i].replace(' (', "¬©")
    res2[i] = res2[i].replace(")", "")
file2.close()

file3 = open("resources/Epokha_Marxizma_i_vytekayuschikh_iz_nego_techeniy.txt", mode="r", encoding="utf8")
theme1 = file3.read().split('<new>')
for i in range(len(theme1)):
    theme1[i] = theme1[i].strip()
file3.close()

file4 = open("resources/Drevnyaya_India_i_Kitay.txt", mode="r", encoding="utf8")
theme2 = file4.read().split('<new>')
for i in range(len(theme2)):
    theme2[i] = theme2[i].strip()
file4.close()

file5 = open("resources/Gumanizm_Molot_Vedm_Erazm.txt", mode="r", encoding="utf8")
theme3 = file5.read().split('<new>')
for i in range(len(theme3)):
    theme3[i] = theme3[i].strip()
file5.close()

file6 = open("resources/Russkaya_filosofia.txt", mode="r", encoding="utf8")
theme4 = file6.read().split('<new>')
for i in range(len(theme4)):
    theme4[i] = theme4[i].strip()
file6.close()

file7 = open("resources/Pozitsivizm.txt", mode="r", encoding="utf8")
theme5 = file7.read().split('<new>')
for i in range(len(theme5)):
    theme5[i] = theme5[i].strip()
file7.close()




@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    try:
        await bot.send_message(message.from_user.id,
                               '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –§–∏–ª–æ–Ω–µ–º–∞üëã. –ú–æ—ë –∏–º—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –æ—Ç –¥–≤—É—Ö —Å–ª–æ–≤ - —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –∏ —Å–∏–Ω–µ–º–∞(–∫–∏–Ω–æ).',
                               reply_markup=keyboards_client)
        await message.delete()
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É:\nt.me/PhilonemaBot')


@dp.message_handler(commands='—Å—Å—ã–ª–∫–∏')
async def url_command(message: types.Message):
    await message.answer('–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:', reply_markup=urlkb)


@dp.message_handler(commands="–¶–∏—Ç–∞—Ç—ã")
async def give_quotes(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–õ—é–±–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="quotes")).add(
        types.InlineKeyboardButton(text="–¶–∏—Ç–∞—Ç–∞ –æ –∫–∏–Ω–æ", callback_data="cinema_quotes"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é —Ü–∏—Ç–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ:", reply_markup=keyboard)


@dp.callback_query_handler(text="quotes")
async def send_quotes(call: types.CallbackQuery):
    random_count = random.randint(0, len(quotes))
    await call.message.answer(quotes[random_count] + "¬©" + authors[random_count])


@dp.callback_query_handler(text="cinema_quotes")
async def send_cinema_quotes(call: types.CallbackQuery):
    random_count = random.randint(0, len(res2))
    await call.message.answer(res2[random_count])


@dp.message_handler(commands="–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏")
async def give_quotes(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–≠–ø–æ—Ö–∞ –ú–∞—Ä–∫—Å–∏–∑–º–∞ –∏ –≤—ã—Ç–µ–∫–∞—é—â–∏—Ö –∏–∑ –Ω–µ–≥–æ —Ç–µ—á–µ–Ω–∏–π", callback_data="topic1"))
    keyboard.add(types.InlineKeyboardButton(text="–î—Ä–µ–≤–Ω—è—è –ò–Ω–¥–∏—è –∏ –ö–∏—Ç–∞–π", callback_data="topic2"))
    keyboard.add(types.InlineKeyboardButton(text="–ì—É–º–∞–Ω–∏–∑–º, –ú–æ–ª–æ—Ç –í–µ–¥—å–º, –≠—Ä–∞–∑–º", callback_data="topic3"))
    keyboard.add(types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", callback_data="topic4"))
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–∑–∏—Ü–∏–≤–∏–∑–º", callback_data="topic5"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)

def get_headers(theme):
    headers = []
    for i in range(len(theme)):
        temp = theme[i].split('\n')
        headers.append(temp[0])
    return headers


@dp.callback_query_handler(text="topic1")
async def topic1(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(theme1)):
        temp = theme1[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer("–≠–ø–æ—Ö–∞ –ú–∞—Ä–∫—Å–∏–∑–º–∞ –∏ –≤—ã—Ç–µ–∫–∞—é—â–∏—Ö –∏–∑ –Ω–µ–≥–æ —Ç–µ—á–µ–Ω–∏–π:", reply_markup=keyboard)


@dp.callback_query_handler(text="topic2")
async def topic2(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(theme2)):
        temp = theme2[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer("–î—Ä–µ–≤–Ω—è—è –ò–Ω–¥–∏—è –∏ –ö–∏—Ç–∞–π:", reply_markup=keyboard)


@dp.callback_query_handler(text="topic3")
async def topic3(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(theme3)):
        temp = theme3[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer("–ì—É–º–∞–Ω–∏–∑–º, –ú–æ–ª–æ—Ç –í–µ–¥—å–º, –≠—Ä–∞–∑–º:", reply_markup=keyboard)

@dp.callback_query_handler(text="topic4")
async def topic4(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(theme4)):
        temp = theme4[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer("–†—É—Å—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è:", reply_markup=keyboard)


@dp.callback_query_handler(text="topic5")
async def topic5(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(len(theme5)):
        temp = theme5[i].split('\n')
        keyboard.add(types.InlineKeyboardButton(text=temp[0], callback_data=temp[0]))
    await call.message.answer("–ü–æ–∑–∏—Ü–∏–≤–∏–∑–º:", reply_markup=keyboard)

# path = 'resources/' + call.data.lower().strip() + '.jpg'
# photo = open(path, 'rb')
# await call.message.answer_photo(photo, caption=theme1[i])
@dp.callback_query_handler()
async def lasten(call: types.CallbackQuery):
    for i in range(len(theme1)):
        if call.data == get_headers(theme1)[i]:
            await call.message.answer(theme1[i])
    for i in range(len(theme2)):
        if call.data == get_headers(theme2)[i]:
            await call.message.answer(theme2[i])
    for i in range(len(theme3)):
        if call.data == get_headers(theme3)[i]:
            await call.message.answer(theme3[i])
    for i in range(len(theme4)):
        if call.data == get_headers(theme4)[i]:
            await call.message.answer(theme4[i])
    for i in range(len(theme5)):
        if call.data == get_headers(theme5)[i]:
            await call.message.answer(theme5[i])

@dp.message_handler(commands=['–ó–∞—á–µ–º_—Ç—ã_–Ω—É–∂–µ–Ω?'])
async def why_need(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü–æ–∫–∞ —á—Ç–æ —è –∏ —Å–∞–º —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞—é, —ç—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Åü§î')


def register_handler_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(why_need, commands=['–ó–∞—á–µ–º_—Ç—ã_–Ω—É–∂–µ–Ω?'])
    dp.register_message_handler(give_quotes, commands=['–¶–∏—Ç–∞—Ç—ã'])
    dp.register_message_handler(give_quotes, commands=['–ö—É—Ä—Å_—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏'])
